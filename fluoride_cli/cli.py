import shutil
import os
import boto3
import click
import uuid
import traceback
import ast

from .lib import parse_inputs,push_existing_image_to_ecr,build_and_push_image_to_ecr,update_stack,describe,secretify,make_ecr_repo,check_health,configure,check_for_updates,check_for_environment_variables,check_profile,set_profile,delete_profile,clear_profile_config,where_am_i,check_role,set_role,release_role,generate_multicontainer_cloudformation,parse_potential_array_inputs,evaluate_string_input,execute_command

version_number = 1.31

@click.command()
@click.argument("command", default='')
@click.option("--account_number", help="The number of the AWS account you want to act on should go here.", default=None)
@click.option("--use_env_variables", help="Even if you have a profile set you can set this flag to 'False' and the CLI will act as if you don't have a profile set allowing you to overwrite the profile variables you set.", default=None)
@click.option("--role_to_assume_to_target_account", help="This is the role you'd like to assume into in the target account to perform operations.", default=None)
@click.option("--local_image_to_push", help="The name of a local image you'd like to push to ECR. Specify in the following manner: '<image>:<tag>'.", default=None)
@click.option("--path_to_docker_folder", help="Path to the folder on your local machine that contains a 'Dockerfile.txt' at minimum. The script will build your container using this folder.", default=None)
@click.option("--ecr_repo_to_push_to", help="The name of the ECR repo you'd like to push to should go here.", default=None)
@click.option("--cloudformation_of_architecture", help="The name of the cloudformation stack that contains the .", default=None)
@click.option("--ecr_repo_to_make", help="This is the name of the ECR repo you'd like to make should go here.", default=None)
@click.option("--path_to_local_secrets", help="A path to a local folder of secrets files you'd like deployed to secrets manager.", default=None)
@click.option("--secret_store", help="The name of the secret manager store associated with your architecture goes here.", default=None)
@click.option("--profile_name", help="The name of the profile you'd like to act on goes here.", default=None)
@click.option("--output_path", help="The path (including filename) where you'd like to put the cloudformation generated by the generate_multicontainer_cloudformation command.", default=None)
@click.option("--number_of_images", help="The number of images(containers) you'd like the cloudformation generated by the generate_multicontainer_cloudformation command to accomodate.", default=None)
@click.option("--dont_assume", help="Set this flag to True to not assume role to use a command. If you've set a role or your working in the root account this would make sense to do. Allowed values are "+'"'+"True"+'" or'+ ' "'+"False"+'".', default=None)
@click.option("--mfa_token", help="You can use this flag with any command that requires the 'role_to_assume_to_target_account' variables to provide an mfa token from an mfa device for use with assuming role.", default=None)
@click.option("--serial_number", help="Set this flag whenever you use set the mfa_token flag. This should be the ARN of the mfa device you're using to generate a token.", default=None)
@click.option("--container", help='Optional flag used to specify a container for the "execute_command" command. This flag indicates the optional name of the container to execute the command on. A container name only needs to be specified for tasks containing multiple containers.', default=None)
@click.option("--command_to_execute", help='Optional flag used to specify a command for the "execute_command" command. By default this command is "/bin/sh" but you can overwrite it to be whatever you would like it to be.', default=None)
def run(command, account_number, use_env_variables, role_to_assume_to_target_account, local_image_to_push, path_to_docker_folder, ecr_repo_to_push_to, cloudformation_of_architecture, ecr_repo_to_make, path_to_local_secrets, secret_store, profile_name, output_path, number_of_images, dont_assume, mfa_token, serial_number, container, command_to_execute):

    #Get initial context. This will be used for parsing inputs to functions just before their respective calls.
    initial_context = locals().copy()

    #set boolean flag defaults
    if use_env_variables is None:
        use_env_variables = 'True'
    if dont_assume is None:
        dont_assume = 'False'

    "Valid commands are: 'push_existing_image_to_ecr','build_and_push_image_to_ecr','execute_command','update_stack','make_ecr_repo','generate_multicontainer_cloudformation','secretify','check_health','set_role','configure','delete_profile','set_profile','set_profile','clear_profile_config','check_profile','check_role','check_update','release_role', and 'where_am_i'."
    if not command:
        print()
        print("\033[4m" + 'GENERAL DESCRIPTION STARTS HERE' + "\033[0m")
        print('Welcome to Fluoride CLI! Written 2020 by Jacob Mevorach for Ginkgo Bioworks.')
        print('Available commands: ' + "'build_and_push_image_to_ecr','execute_command','update_stack','make_ecr_repo','generate_multicontainer_cloudformation','secretify','check_health','set_role','configure','delete_profile','set_profile','set_profile','clear_profile_config','check_profile','check_role','check_update','release_role', and 'where_am_i'.")
        print("\033[4m" + 'GENERAL DESCRIPTION ENDS HERE' + "\033[0m")
        print()
        print("\033[4m" + 'DESCRIPTION OF EACH COMMANDS ARGUMENTS STARTS HERE' + "\033[0m")
        print('push_existing_image_to_ecr arguments: ' + "account_number,role_to_assume_to_target_account,ecr_repo_to_push_to,local_image_to_push")
        print('build_and_push_image_to_ecr arguments: ' + "account_number,role_to_assume_to_target_account,path_to_docker_folder,ecr_repo_to_push_to")
        print('execute_command arguments: ' + "account_number,role_to_assume_to_target_account,cloudformation_of_architecture,container,command")
        print('update_stack arguments: ' + "account_number,role_to_assume_to_target_account,cloudformation_of_architecture")
        print('describe arguments: ' + "account_number,role_to_assume_to_target_account,cloudformation_of_architecture")
        print('make_ecr_repo arguments: ' + "account_number,role_to_assume_to_target_account,ecr_repo_to_make")
        print('generate_multicontainer_cloudformation arguments: ' + "output_path,number_of_images")
        print('secretify arguments: ' + "account_number,role_to_assume_to_target_account,secret_store")
        print('check_health arguments: ' + "account_number,role_to_assume_to_target_account,cloudformation_of_architecture")
        print('set_role arguments: ' + "account_number,role_to_assume_to_target_account")
        print('configure arguments: ' + "profile_name")
        print('delete_profile arguments: ' + "profile_name")
        print('set_profile arguments: ' + "profile_name")
        print('clear_profile_config arguments: ' + "NONE!")
        print('check_profile arguments: ' + "NONE!")
        print('check_role arguments: ' + "NONE!")
        print('check_update arguments: ' + "NONE!")
        print('release_role arguments: ' + "NONE!")
        print('where_am_i arguments: ' + "NONE!")
        print("\033[4m" + 'DESCRIPTION OF EACH COMMANDS ARGUMENTS ENDS HERE' + "\033[0m")
        print()
        print("\033[4m" + 'OTHER OPTIONS START HERE' + "\033[0m")
        print('--use_env_variables: ' + "Even if you have a profile set you can set this flag to 'False' and the CLI will act as if you don't have a profile set allowing you to overwrite the profile variables you set.")
        print('--mfa_token: ' + "You can use this flag with any command that requires the 'role_to_assume_to_target_account' variables to provide an mfa token from an mfa device for use with assuming role.")
        print('--serial_number: ' + "Set this flag whenever you use set the mfa_token flag. This should be the ARN of the mfa device you're using to generate a token.")
        print('--dont_assume: ' + "Set this flag to True to not assume role to use a command. If you've set a role or your working in the root account this would make sense to do. Allowed values are "+'"'+"True"+'" or'+ ' "'+"False"+'".')
        print('--container: ' + 'Optional flag used to specify a container for the "execute_command" command. This flag indicates the optional name of the container to execute the command on. A container name only needs to be specified for tasks containing multiple containers.')
        print('--command_to_execute: ' + 'Optional flag used to specify a command for the "execute_command" command. By default this command is "/bin/sh" but you can overwrite it to be whatever you would like it to be.')
        print("\033[4m" + 'OTHER OPTIONS END HERE' + "\033[0m")
        print()
        return

    command = str(command)

    if account_number != None:
        account_number = str(account_number)

    if role_to_assume_to_target_account != None:
        role_to_assume_to_target_account = str(role_to_assume_to_target_account)

    if local_image_to_push != None:
        local_image_to_push = str(local_image_to_push)

    if path_to_docker_folder != None:
        path_to_docker_folder = str(path_to_docker_folder)

    if ecr_repo_to_push_to != None:
        ecr_repo_to_push_to = str(ecr_repo_to_push_to)

    if cloudformation_of_architecture != None:
        cloudformation_of_architecture = str(cloudformation_of_architecture)

    if ecr_repo_to_make != None:
        ecr_repo_to_make = str(ecr_repo_to_make)

    if path_to_local_secrets != None:
        path_to_local_secrets = str(path_to_local_secrets)

    if secret_store != None:
        secret_store = str(secret_store)

    if profile_name != None:
        profile_name = str(profile_name)

    if output_path != None:
        output_path = str(output_path)

    if number_of_images != None:
        number_of_images = str(number_of_images)

    os.chdir(os.path.dirname(os.path.realpath(__file__)))

    if os.path.exists('temp_store'):
        shutil.rmtree('temp_store')
        os.mkdir('temp_store')
    else:
        os.mkdir('temp_store')

    os.chdir(os.path.join(os.path.dirname(os.path.realpath(__file__)),'temp_store'))

    if use_env_variables not in ['True','False']:
        print('"'+use_env_variables+'"'+ ' was not recognized as a valid option for the "use_env_variables" flag. Valid options are: ' + "'True' or 'False'" +".")
        raise ValueError('Invalid environment variables flag supplied!')

    if dont_assume not in ['True','False']:
        print('"'+dont_assume+'"'+ ' was not recognized as a valid option for the "dont_assume" flag. Valid options are: ' + "'True' or 'False'" +".")
        raise ValueError('Invalid environment variables flag supplied!')

    if command not in ['push_existing_image_to_ecr','build_and_push_image_to_ecr','execute_command','update_stack','make_ecr_repo','generate_multicontainer_cloudformation','secretify','check_health','set_role','configure','delete_profile','set_profile','set_profile','clear_profile_config','check_profile','check_role','check_update','release_role', 'where_am_i']:
        print('"'+command+'"'+ ' was not recognized as a valid command. Valid commands are: ' + "'push_existing_image_to_ecr','build_and_push_image_to_ecr','update_stack','make_ecr_repo','generate_multicontainer_cloudformation','secretify','check_health','set_role','configure','delete_profile','set_profile','set_profile','clear_profile_config','check_profile','check_role','check_update','release_role', and 'where_am_i'.")
        raise ValueError('Invalid command supplied!')

    if dont_assume == 'True':
        role_to_assume_to_target_account = str(uuid.uuid4()) #make the argument a random string if you're not assuming so we don't trigger the non initialization check if no default is set.
        account_number = str(uuid.uuid4()) #make the argument a random string if you're not assuming so we don't trigger the non initialization check if no default is set.

    if use_env_variables == 'True':
        account_number, role_to_assume_to_target_account, local_image_to_push, path_to_docker_folder, ecr_repo_to_push_to, cloudformation_of_architecture, ecr_repo_to_make, path_to_local_secrets, secret_store = check_for_environment_variables(account_number, role_to_assume_to_target_account, local_image_to_push, path_to_docker_folder, ecr_repo_to_push_to, cloudformation_of_architecture, ecr_repo_to_make, path_to_local_secrets, secret_store)

    if command == 'push_existing_image_to_ecr':

        minimum_variables_to_be_declared = ['account_number','role_to_assume_to_target_account','local_image_to_push','ecr_repo_to_push_to']
        maximum_variables_to_be_declared = ['account_number','role_to_assume_to_target_account','local_image_to_push','ecr_repo_to_push_to','dont_assume','mfa_token','serial_number']
        variables_exempt_from_parsing = ['use_env_variables']

        parse_inputs(command, minimum_variables_to_be_declared, maximum_variables_to_be_declared,
                     variables_exempt_from_parsing, initial_context, locals().copy())

        inputs_are_lists = parse_potential_array_inputs(command, [local_image_to_push,ecr_repo_to_push_to], ['local_image_to_push','ecr_repo_to_push_to'])

        push_existing_image_to_ecr(account_number, role_to_assume_to_target_account, ecr_repo_to_push_to, local_image_to_push, dont_assume, mfa_token, serial_number, inputs_are_lists)

    if command == 'build_and_push_image_to_ecr':

        minimum_variables_to_be_declared = ['account_number','role_to_assume_to_target_account','path_to_docker_folder','ecr_repo_to_push_to']
        maximum_variables_to_be_declared = ['account_number','role_to_assume_to_target_account','path_to_docker_folder','ecr_repo_to_push_to','dont_assume','mfa_token','serial_number']
        variables_exempt_from_parsing = ['use_env_variables']

        parse_inputs(command, minimum_variables_to_be_declared, maximum_variables_to_be_declared,
                     variables_exempt_from_parsing, initial_context, locals().copy())

        inputs_are_lists = parse_potential_array_inputs(command, [path_to_docker_folder,ecr_repo_to_push_to], ['path_to_docker_folder','ecr_repo_to_push_to'])

        build_and_push_image_to_ecr(account_number,role_to_assume_to_target_account,path_to_docker_folder,ecr_repo_to_push_to,dont_assume,mfa_token,serial_number,inputs_are_lists)

    if command == 'execute_command':

        minimum_variables_to_be_declared = ['account_number','role_to_assume_to_target_account','cloudformation_of_architecture']
        maximum_variables_to_be_declared = ['account_number','role_to_assume_to_target_account','cloudformation_of_architecture','dont_assume','mfa_token','serial_number','container','command_to_execute']
        variables_exempt_from_parsing = ['use_env_variables']

        parse_inputs(command, minimum_variables_to_be_declared, maximum_variables_to_be_declared,
                     variables_exempt_from_parsing, initial_context, locals().copy())

        execute_command(account_number,role_to_assume_to_target_account,cloudformation_of_architecture,dont_assume,mfa_token,serial_number,container,command_to_execute)

    if command == 'make_ecr_repo':

        minimum_variables_to_be_declared = ['account_number','role_to_assume_to_target_account','ecr_repo_to_make']
        maximum_variables_to_be_declared = ['account_number','role_to_assume_to_target_account','ecr_repo_to_make','dont_assume','mfa_token','serial_number']
        variables_exempt_from_parsing = ['use_env_variables']

        parse_inputs(command, minimum_variables_to_be_declared, maximum_variables_to_be_declared,
                     variables_exempt_from_parsing, initial_context, locals().copy())

        inputs_are_lists = parse_potential_array_inputs(command, [ecr_repo_to_make], ['ecr_repo_to_make'])

        make_ecr_repo(account_number,role_to_assume_to_target_account,ecr_repo_to_make,dont_assume,mfa_token,serial_number,inputs_are_lists)

    if command == 'generate_multicontainer_cloudformation':

        minimum_variables_to_be_declared = ['output_path','number_of_images']
        maximum_variables_to_be_declared = ['output_path','number_of_images']
        variables_exempt_from_parsing = ['use_env_variables']

        parse_inputs(command, minimum_variables_to_be_declared, maximum_variables_to_be_declared,
                     variables_exempt_from_parsing, initial_context, locals().copy())

        generate_multicontainer_cloudformation(os.path.join(os.path.dirname(os.path.realpath(__file__))),output_path,number_of_images)

    if command == 'update_stack':

        minimum_variables_to_be_declared = ['account_number','role_to_assume_to_target_account','cloudformation_of_architecture']
        maximum_variables_to_be_declared = ['account_number','role_to_assume_to_target_account','cloudformation_of_architecture','dont_assume','mfa_token','serial_number']
        variables_exempt_from_parsing = ['use_env_variables']

        parse_inputs(command, minimum_variables_to_be_declared, maximum_variables_to_be_declared,
                     variables_exempt_from_parsing, initial_context, locals().copy())

        update_stack(account_number,role_to_assume_to_target_account,cloudformation_of_architecture,dont_assume,mfa_token,serial_number)

    if command == 'describe':

        minimum_variables_to_be_declared = ['account_number','role_to_assume_to_target_account','cloudformation_of_architecture']
        maximum_variables_to_be_declared = ['account_number','role_to_assume_to_target_account','cloudformation_of_architecture','dont_assume','mfa_token','serial_number']
        variables_exempt_from_parsing = ['use_env_variables']

        parse_inputs(command, minimum_variables_to_be_declared, maximum_variables_to_be_declared,
                     variables_exempt_from_parsing, initial_context, locals().copy())

        describe(account_number,role_to_assume_to_target_account,cloudformation_of_architecture,dont_assume,mfa_token,serial_number)

    if command == 'secretify':

        minimum_variables_to_be_declared = ['account_number','role_to_assume_to_target_account','path_to_local_secrets','secret_store']
        maximum_variables_to_be_declared = ['account_number','role_to_assume_to_target_account','path_to_local_secrets','secret_store','dont_assume','mfa_token','serial_number']
        variables_exempt_from_parsing = ['use_env_variables']

        parse_inputs(command, minimum_variables_to_be_declared, maximum_variables_to_be_declared,
                     variables_exempt_from_parsing, initial_context, locals().copy())

        secretify(account_number,role_to_assume_to_target_account,path_to_local_secrets,secret_store,dont_assume,mfa_token,serial_number)

    if command == 'check_health':

        minimum_variables_to_be_declared = ['account_number','role_to_assume_to_target_account','cloudformation_of_architecture']
        maximum_variables_to_be_declared = ['account_number','role_to_assume_to_target_account','cloudformation_of_architecture','dont_assume','mfa_token','serial_number']
        variables_exempt_from_parsing = ['use_env_variables']


        parse_inputs(command, minimum_variables_to_be_declared, maximum_variables_to_be_declared,
                     variables_exempt_from_parsing, initial_context, locals().copy())

        check_health(account_number,role_to_assume_to_target_account,cloudformation_of_architecture,dont_assume,mfa_token,serial_number)

    if command == 'set_role':

        minimum_variables_to_be_declared = ['account_number', 'role_to_assume_to_target_account']
        maximum_variables_to_be_declared = ['account_number', 'role_to_assume_to_target_account', 'mfa_token', 'serial_number']
        variables_exempt_from_parsing = ['use_env_variables']

        parse_inputs(command, minimum_variables_to_be_declared, maximum_variables_to_be_declared,
                     variables_exempt_from_parsing, initial_context, locals().copy())

        set_role(account_number, role_to_assume_to_target_account, mfa_token, serial_number)

    if command == 'configure':

        minimum_variables_to_be_declared = ['profile_name']
        maximum_variables_to_be_declared = ['profile_name']
        variables_exempt_from_parsing = ['use_env_variables']

        parse_inputs(command, minimum_variables_to_be_declared, maximum_variables_to_be_declared,
                     variables_exempt_from_parsing, initial_context, locals().copy())

        configure(profile_name)

    if command == 'delete_profile':

        minimum_variables_to_be_declared = ['profile_name']
        maximum_variables_to_be_declared = ['profile_name']
        variables_exempt_from_parsing = ['use_env_variables']

        parse_inputs(command, minimum_variables_to_be_declared, maximum_variables_to_be_declared,
                     variables_exempt_from_parsing, initial_context, locals().copy())

        delete_profile(profile_name)

    if command == 'set_profile':

        minimum_variables_to_be_declared = ['profile_name']
        maximum_variables_to_be_declared = ['profile_name']
        variables_exempt_from_parsing = []

        parse_inputs(command, minimum_variables_to_be_declared, maximum_variables_to_be_declared,
                     variables_exempt_from_parsing, initial_context, locals().copy())

        set_profile(profile_name)

    if command == 'clear_profile_config':

        minimum_variables_to_be_declared = []
        maximum_variables_to_be_declared = []
        variables_exempt_from_parsing = []

        parse_inputs(command, minimum_variables_to_be_declared, maximum_variables_to_be_declared,
                     variables_exempt_from_parsing, initial_context, locals().copy())

        clear_profile_config()

    if command == 'check_profile':

        minimum_variables_to_be_declared = []
        maximum_variables_to_be_declared = []
        variables_exempt_from_parsing = []

        parse_inputs(command, minimum_variables_to_be_declared, maximum_variables_to_be_declared,
                     variables_exempt_from_parsing, initial_context, locals().copy())

        check_profile()

    if command == 'check_role':

        minimum_variables_to_be_declared = []
        maximum_variables_to_be_declared = []
        variables_exempt_from_parsing = []

        parse_inputs(command, minimum_variables_to_be_declared, maximum_variables_to_be_declared,
                     variables_exempt_from_parsing, initial_context, locals().copy())

        check_role()

    if command == 'check_update':

        minimum_variables_to_be_declared = []
        maximum_variables_to_be_declared = []
        variables_exempt_from_parsing = []

        parse_inputs(command, minimum_variables_to_be_declared, maximum_variables_to_be_declared,
                     variables_exempt_from_parsing, initial_context, locals().copy())

        check_for_updates()

    if command == 'release_role':

        minimum_variables_to_be_declared = []
        maximum_variables_to_be_declared = []
        variables_exempt_from_parsing = []

        parse_inputs(command, minimum_variables_to_be_declared, maximum_variables_to_be_declared,
                     variables_exempt_from_parsing, initial_context, locals().copy())

        release_role()

    if command == 'where_am_i':

        minimum_variables_to_be_declared = []
        maximum_variables_to_be_declared = []
        variables_exempt_from_parsing = []

        parse_inputs(command, minimum_variables_to_be_declared, maximum_variables_to_be_declared,
                     variables_exempt_from_parsing, initial_context, locals().copy())

        where_am_i(os.path.join(os.path.dirname(os.path.realpath(__file__))))

    if command == 'help':
        print()
        print("\033[4m" + 'GENERAL DESCRIPTION STARTS HERE' + "\033[0m")
        print('Welcome to Fluoride CLI! Written 2020 by Jacob Mevorach for Ginkgo Bioworks.')
        print('Available commands: ' + "'build_and_push_image_to_ecr','update_stack','make_ecr_repo','generate_multicontainer_cloudformation','secretify','check_health','set_role','configure','delete_profile','set_profile','set_profile','clear_profile_config','check_profile','check_role','check_update','release_role', and 'where_am_i'.")
        print("\033[4m" + 'GENERAL DESCRIPTION ENDS HERE' + "\033[0m")
        print()
        print("\033[4m" + 'DESCRIPTION OF EACH COMMANDS ARGUMENTS STARTS HERE' + "\033[0m")
        print('push_existing_image_to_ecr arguments: ' + "account_number,role_to_assume_to_target_account,ecr_repo_to_push_to,local_image_to_push")
        print('build_and_push_image_to_ecr arguments: ' + "account_number,role_to_assume_to_target_account,path_to_docker_folder,ecr_repo_to_push_to")
        print('update_stack arguments: ' + "account_number,role_to_assume_to_target_account,cloudformation_of_architecture")
        print('describe arguments: ' + "account_number,role_to_assume_to_target_account,cloudformation_of_architecture")
        print('make_ecr_repo arguments: ' + "account_number,role_to_assume_to_target_account,ecr_repo_to_make")
        print('generate_multicontainer_cloudformation arguments: ' + "output_path,number_of_images")
        print('secretify arguments: ' + "account_number,role_to_assume_to_target_account,secret_store")
        print('check_health arguments: ' + "account_number,role_to_assume_to_target_account,cloudformation_of_architecture")
        print('set_role arguments: ' + "account_number,role_to_assume_to_target_account")
        print('configure arguments: ' + "profile_name")
        print('delete_profile arguments: ' + "profile_name")
        print('set_profile arguments: ' + "profile_name")
        print('clear_profile_config arguments: ' + "NONE!")
        print('check_profile arguments: ' + "NONE!")
        print('check_role arguments: ' + "NONE!")
        print('check_update arguments: ' + "NONE!")
        print('release_role arguments: ' + "NONE!")
        print('where_am_i arguments: ' + "NONE!")
        print("\033[4m" + 'DESCRIPTION OF EACH COMMANDS ARGUMENTS ENDS HERE' + "\033[0m")
        print()
        print("\033[4m" + 'OTHER OPTIONS START HERE' + "\033[0m")
        print('--use_env_variables: ' + "Even if you have a profile set you can set this flag to 'False' and the CLI will act as if you don't have a profile set allowing you to overwrite the profile variables you set.")
        print('--mfa_token: ' + "You can use this flag with any command that requires the 'role_to_assume_to_target_account' variables to provide an mfa token from an mfa device for use with assuming role.")
        print('--serial_number: ' + "Set this flag whenever you use set the mfa_token flag. This should be the ARN of the mfa device you're using to generate a token.")
        print('--dont_assume: ' + "Set this flag to True to not assume role to use a command. If you've set a role or your working in the root account this would make sense to do. Allowed values are "+'"'+"True"+'" or'+ ' "'+"False"+'".')
        print('--container: ' + 'Optional flag used to specify a container for the "execute_command" command. This flag indicates the optional name of the container to execute the command on. A container name only needs to be specified for tasks containing multiple containers.')
        print('--command_to_execute: ' + 'Optional flag used to specify a command for the "execute_command" command. By default this command is "/bin/sh" but you can overwrite it to be whatever you would like it to be.')
        print("\033[4m" + 'OTHER OPTIONS END HERE' + "\033[0m")
        print()


